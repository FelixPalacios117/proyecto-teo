from utils.Nterminales import *
# Tabla parser
tabla = [
    # Simbolo inicial
    [S, 'int', ['int', I, S]],
    [S, 'return', [B]],
    [S, 'float', ['float', I, S]],
    [S, 'char', ['char', I, S]],
    [S, 'asignacion', None],
    [S, 'define', ['define', ID, S]],
    [S, 'include', ['include', S]],
    [S, 'identificador', [I, S]],
    [S, 'eof', ['eof']],
    [S, 'puntocoma', None],
    [S, 'llaveder', ['llaveder']],
    [S, 'if', ['if', C, S]],
    [S, 'llaveizq', None],
    [S, 'else', None],
    [S, 'coma', None],
    [S, 'for_or', None],
    [S, 'for', ['for', BU]],
    [S, 'parender', None],
    [S, 'parenizq', None],
    [S, 'character', None],
    [S, 'number', ['number', AR, S]],
    [S, 'double', ['double', AR, S]],
    [S, 'suma', None],
    [S, 'division', None],
    [S, 'multiplicacion', None],
    [S, 'resta', None],
    [S, 'aritmetico', None],
    [S, 'logico', None],
    [S, 'void', None],
    # identificadores
    [I, 'identificador', ['identificador', A]],
    [I, 'include', None],
    [I, 'asignacion', None],
    [I, 'float', None],
    [I, 'int', None],
    [I, 'coma', None],
    [I, 'puntocoma', None],
    [I, 'logico', None],
    [I, 'double', None],
    [I, 'char', None],
    [I, 'number', None],
    [I, 'character', None],
    [I, 'for_or', None],
    [I, 'parender', None],
    [I, 'parenizq', None],
    [I, 'llaveizq', None],
    [I, 'llaveder', None],
    [I, 'for', None],
    [I, 'if', None],
    [I, 'else', None],
    [I, 'void', None],
    [I, 'suma', None],
    [I, 'resta', None],
    [I, 'multiplicacion', None],
    [I, 'division', None],
    [I, 'aritmetico', None],
    [I, 'define', None],
    [I, 'return', None],
    [I, 'eof', None],
    # operaciones aritmeticas
    [AR, 'suma', ['suma', OPA, AR]],
    [AR, 'resta', ['resta', OPA, AR]],
    [AR, 'division', ['division', OPA, AR]],
    [AR, 'multiplicacion', ['multiplicacion', OPA, AR]],
    [AR, 'puntocoma', ['puntocoma']],
    [AR, 'coma', None],
    [AR, 'void', None],
    [AR, 'include', None],
    [AR, 'define', None],
    [AR, 'int', None],
    [AR, 'asignacion', None],
    [AR, 'if', None],
    [AR, 'return', None],
    [AR, 'identificador', None],
    [AR, 'float', None],
    [AR, 'char', None],
    [AR, 'number', None],
    [AR, 'character', None],
    [AR, 'double', None],
    [AR, 'else', None],
    [AR, 'for', None],
    [AR, 'parender', None],
    [AR, 'parenizq', None],
    [AR, 'llaveizq', None],
    [AR, 'llaveder', None],
    [AR, 'logico', None],
    [AR, 'aritmetico', None],
    [AR, 'eof', None],
    [AR, 'for_or', None],
    #complemento operaciones aritmeticas
    [OPA, 'identificador', ['identificador']],
    [OPA, 'number', ['number']],
    [OPA, 'double', ['double']],
    [OPA, 'character', None],
    # asignaciones
    [A, 'suma', [AR]],
    [A, 'resta', [AR]],
    [A, 'division', [AR]],
    [A, 'multiplicacion', [AR]],
    [A, 'asignacion', ['asignacion', T, A]],
    [A, 'parenizq', ['parenizq', E]],  # usado para funciones
    [A, 'coma', ['coma', I]],
    [A, 'puntocoma', ['puntocoma']],
    [A, 'include', None],
    [A, 'int', None],
    [A, 'for', None],
    [A, 'if', None],
    [A, 'else', None],
    [A, 'llaveizq', None],
    [A, 'parender', None],
    [A, 'llaveder', None],
    [A, 'logico', None],
    [A, 'double', None],
    [A, 'char', None],
    [A, 'number', None],
    [A, 'character', None],
    [A, 'for_or', None],
    [A, 'identificador', None],
    [A, 'float', None],
    [A, 'void', None],
    [T, 'number', ['number']],
    [T, 'double', ['double']],
    [T, 'character', ['character']],
    [T, 'int', None],
    [T, 'char', None],
    [T, 'float', None],
    [T, 'eof', None],
    [T, 'for', None],
    [T, 'if', None],
    [T, 'else', None],
    [T, 'asignacion', None],
    [T, 'define', None],
    [T, 'llaveizq', None],
    [T, 'llaveder', None],
    [T, 'parender', None],
    [T, 'parenizq', None],
    [T, 'coma', None],
    [T, 'for_or', None],
    [T, 'logico', None],
    [T, 'void', None],
    [T, 'puntocoma', None],
    [T, 'identificador', None],
    # usado en funciones para definir bloque
    [F, 'parender', ['parender', 'llaveizq', B, S]],
    [F, 'number', ['number']],
    [F, 'double', ['double']],
    [F, 'character', ['character']],
    [F, 'int', None],
    [F, 'char', None],
    [F, 'float', None],
    [F, 'eof', None],
    [F, 'for', None],
    [F, 'if', None],
    [F, 'else', None],
    [F, 'asignacion', None],
    [F, 'define', None],
    [F, 'llaveizq', None],
    [F, 'llaveder', None],
    [F, 'parenizq', None],
    [F, 'coma', None],
    [F, 'for_or', None],
    [F, 'logico', None],
    [F, 'void', None],
    [F, 'puntocoma', None],
    [F, 'identificador', None],
    # usado en parametros de funciones
    [E, 'int', ['int', EF]],
    [E, 'coma', ['coma', E]],
    [E, 'float', ['float', EF]],
    [E, 'char', ['char', EF]],
    [E, 'number', None],
    [E, 'character', None],
    [E, 'double', None],
    [E, 'eof', None],
    [E, 'for', None],
    [E, 'if', None],
    [E, 'else', None],
    [E, 'asignacion', None],
    [E, 'define', None],
    [E, 'llaveizq', None],
    [E, 'llaveder', None],
    [E, 'parenizq', None],
    [E, 'parender', None],
    [E, 'for_or', None],
    [E, 'logico', None],
    [E, 'void', None],
    [E, 'puntocoma', None],
    [E, 'identificador', None],
    # Bloques usados en funciones, if, for
    [R, 'puntocoma', ['puntocoma']],
    [R, 'identificador', ['identificador', 'puntocoma']],
    [R, 'number', ['number', 'puntocoma']],
    [R, 'character', ['character', 'puntocoma']],
    [R, 'double', ['double', 'puntocoma']],
    [B, 'int', ['int', 'identificador', A, B]],
    [B, 'return', ['return', R, B]],
    [B, 'float', ['float', 'identificador', A, B]],
    [B, 'char', ['char', 'identificador', A, B]],
    [B, 'identificador', ['identificador', A, B]],
    [B, 'llaveder', ['llaveder']],
    [B, 'for', ['for', BU]],
    [B, 'if', ['if', C]],
    [B, 'eof', None],
    [B, 'number', ['number', AR]],
    [B, 'character', None],
    [B, 'double', ['double', AR]],
    [B, 'logico', None],
    [B, 'for_or', None],
    [B, 'void', None],
    [B, 'llaveizq', None],
    [B, 'parender', None],
    [B, 'parenizq', None],
    [B, 'else', None],
    [B, 'define', None],
    [B, 'coma', None],
    [B, 'puntocoma', None],
    [B, 'include', None],
    # usado para definir la estructura de un if,if-else
    [C, 'parenizq', ['parenizq', EI, 'parender', 'llaveizq', B, EL, S]],  # if
    [C, 'for', None],
    [C, 'int', None],
    [C, 'double', None],
    [C, 'char', None],
    [C, 'if', None],
    [C, 'eof', None],
    [C, 'number', None],
    [C, 'character', None],
    [C, 'float', None],
    [C, 'logico', None],
    [C, 'for_or', None],
    [C, 'void', None],
    [C, 'llaveizq', None],
    [C, 'llaveder', None],
    [C, 'parender', None],
    [C, 'else', None],
    [C, 'define', None],
    [C, 'coma', None],
    [C, 'puntocoma', None],
    [C, 'include', None],
    # Expresion valida o condicion dentro del if
    [EI, 'parender', None],
    [EI, 'identificador', ['identificador', OL, 'identificador']],
    [EI, 'for', None],
    [EI, 'int', None],
    [EI, 'double', None],
    [EI, 'char', None],
    [EI, 'if', None],
    [EI, 'eof', None],
    [EI, 'number', None],
    [EI, 'character', None],
    [EI, 'float', None],
    [EI, 'logico', None],
    [EI, 'for_or', None],
    [EI, 'void', None],
    [EI, 'llaveizq', None],
    [EI, 'parenizq', None],
    [EI, 'llaveder', None],
    [EI, 'else', None],
    [EI, 'define', None],
    [EI, 'coma', None],
    [EI, 'puntocoma', None],
    [EI, 'include', None],
    # Operador logico
    [OL, 'logico', ['logico']],  # funcion
    [OL, 'parender', None],
    [OL, 'identificador', None],
    [OL, 'for', None],
    [OL, 'int', None],
    [OL, 'double', None],
    [OL, 'char', None],
    [OL, 'if', None],
    [OL, 'eof', None],
    [OL, 'number', None],
    [OL, 'character', None],
    [OL, 'float', None],
    [OL, 'for_or', None],
    [OL, 'void', None],
    [OL, 'llaveizq', None],
    [OL, 'parenizq', None],
    [OL, 'llaveder', None],
    [OL, 'else', None],
    [OL, 'define', None],
    [OL, 'coma', None],
    [OL, 'puntocoma', None],
    [OL, 'include', None],
    [EL, 'if', ['if', C]],
    [EL, 'else', ['else', 'llaveizq', B, S]],
    [EL, 'llaveder', ['llaveder']],
    [EL, 'char', [S]],
    [EL, 'int', [S]],
    [EL, 'float', [S]],
    [EL, 'for', [S]],
    [EL, 'eof', ['eof']],  # [EL, 'eof', None],
    [EL, 'llaveizq', None],
    [EL, 'number', None],
    [EL, 'character', None],
    [EL, 'double', None],
    [EL, 'parender', None],
    [EL, 'parenizq', None],
    [EL, 'identificador', None],
    [EL, 'puntocoma', None],
    [EL, 'coma', None],
    [EL, 'logico', None],
    [EL, 'for_or', None],
    [EL, 'define', None],
    [EL, 'include', None],
    [EL, 'void', None],
    # sintaxis del for (int a=0;a<2;a++)...
    [BU, 'for', None],
    [BU, 'int', None],
    [BU, 'double', None],
    [BU, 'parenizq', ['parenizq', EF]],  # for
    [BU, 'float', None],
    [BU, 'char', None],
    [BU, 'number', None],
    [BU, 'parender', None],
    [BU, 'eof', None],
    [BU, 'if', None],
    [BU, 'else', None],
    [BU, 'llaveizq', None],
    [BU, 'llaveder', None],
    [BU, 'coma', None],
    [BU, 'puntocoma', None],
    [BU, 'identificador', None],
    [BU, 'include', None],
    [BU, 'character', None],
    [BU, 'asignacion', None],
    [BU, 'for_or', None],
    [BU, 'logico', None],
    [BU, 'define', None],
    [BU, 'void', None],
    # Sintaxis de los argumentos del for
    [EF, 'int', ['int', 'identificador', 'asignacion', 'number', 'puntocoma',
                 'identificador', OL, 'number', 'puntocoma', 'identificador', 'for_or', 'parender', 'llaveizq', B, S]],
    [EF, 'coma', ['coma', TI, EF]],
    [EF, 'identificador', ['identificador', DF]],
    [EF, 'parender', ['parender', 'puntocoma', S]],
    [EF, 'puntocoma', None],
    [EF, 'int', None],
    [EF, 'double', None],
    [EF, 'char', None],
    [EF, 'number', None],
    [EF, 'float', None],
    [EF, 'character', None],
    [EF, 'parenizq', None],
    [EF, 'llaveizq', None],
    [EF, 'llaveder', None],
    [EF, 'eof', None],
    [EF, 'void', None],
    [EF, 'logico', None],
    [EF, 'for_or', None],
    [EF, 'define', None],
    [EF, 'include', None],
    [EF, 'else', None],
    [EF, 'if', None],
    [EF, 'asignacion', None],
    # hasta aca por el momento tipos terminales
    [TI, 'int', ['int']],
    [TI, 'char', ['char']],
    [TI, 'float', ['float']],
    [TI, 'for', None],
    [TI, 'if', None],
    [TI, 'identificador', None],
    [TI, 'number', None],
    [TI, 'character', None],
    [TI, 'double', None],
    [TI, 'void', None],
    [TI, 'asignacion', None],
    [TI, 'include', None],
    [TI, 'else', None],
    [TI, 'define', None],
    [TI, 'for_or', None],
    [TI, 'logico', None],
    [TI, 'eof', None],
    [TI, 'parenizq', None],
    [TI, 'parender', None],
    [TI, 'llaveizq', None],
    [TI, 'llaveder', None],
    [TI, 'coma', None],
    [TI, 'puntocoma', None],
    # definicion de funciones
    [DF, 'coma', ['coma', TI, 'identificador', DF]],
    [DF, 'parender', [F]],
    [DF, 'int', None],
    [DF, 'float', None],
    [DF, 'char', None],
    [DF, 'identificador', None],
    [DF, 'llaveizq', None],
    [DF, 'llaveder', None],
    [DF, 'eof', None],
    [DF, 'parenizq', None],
    [DF, 'puntocoma', None],
    [DF, 'if', None],
    [DF, 'number', None],
    [DF, 'character', None],
    [DF, 'double', None],
    [DF, 'void', None],
    [DF, 'define', None],
    [DF, 'include', None],
    [DF, 'else', None],
    [DF, 'for', None],
    [DF, 'asignacion', None],
    [DF, 'for_or', None],
    [DF, 'logico', None],
    # definicion macros para constantes simbolicas
    [ID, 'identificador', ['identificador', T]],
    [ID, 'int', None],
    [ID, 'float', None],
    [ID, 'eof', None],
    [ID, 'char', None],
    [ID, 'for', None],
    [ID, 'if', None],
    [ID, 'else', None],
    [ID, 'asignacion', None],
    [ID, 'define', None],
    [ID, 'llaveizq', None],
    [ID, 'llaveder', None],
    [ID, 'parender', None],
    [ID, 'parenizq', None],
    [ID, 'coma', None],
    [ID, 'for_or', None],
    [ID, 'logico', None],
    [ID, 'number', None],
    [ID, 'character', None],
    [ID, 'double', None],
    [ID, 'void', None],
    [ID, 'puntocoma', None],
    [ID, 'eof', None],
]
